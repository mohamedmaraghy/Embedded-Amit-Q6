
AutosarLike.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000036c  000003e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dbc  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a9  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000580  00000000  00000000  00001a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000068c  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000612  00000000  00000000  00002744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002d56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  7a:	0c 94 b4 01 	jmp	0x368	; 0x368 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Dio_WriteChannel>:
		break;
		case Dio_PortB: Dio_WritePort(portId,~PORTB_REG);
		break;
		case Dio_PortC: Dio_WritePort(portId,~PORTC_REG);
		break;
		case Dio_PortD: Dio_WritePort(portId,~PORTD_REG);
  82:	98 2f       	mov	r25, r24
  84:	97 70       	andi	r25, 0x07	; 7
  86:	86 95       	lsr	r24
  88:	86 95       	lsr	r24
  8a:	86 95       	lsr	r24
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	21 f1       	breq	.+72     	; 0xd8 <Dio_WriteChannel+0x56>
  90:	30 f0       	brcs	.+12     	; 0x9e <Dio_WriteChannel+0x1c>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	f1 f1       	breq	.+124    	; 0x112 <Dio_WriteChannel+0x90>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	09 f4       	brne	.+2      	; 0x9c <Dio_WriteChannel+0x1a>
  9a:	58 c0       	rjmp	.+176    	; 0x14c <Dio_WriteChannel+0xca>
  9c:	08 95       	ret
  9e:	61 30       	cpi	r22, 0x01	; 1
  a0:	69 f4       	brne	.+26     	; 0xbc <Dio_WriteChannel+0x3a>
  a2:	4b b3       	in	r20, 0x1b	; 27
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <Dio_WriteChannel+0x2e>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	9a 95       	dec	r25
  b2:	e2 f7       	brpl	.-8      	; 0xac <Dio_WriteChannel+0x2a>
  b4:	cb 01       	movw	r24, r22
  b6:	84 2b       	or	r24, r20
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	08 95       	ret
  bc:	4b b3       	in	r20, 0x1b	; 27
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	b9 01       	movw	r22, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <Dio_WriteChannel+0x48>
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	9a 95       	dec	r25
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <Dio_WriteChannel+0x44>
  ce:	cb 01       	movw	r24, r22
  d0:	80 95       	com	r24
  d2:	84 23       	and	r24, r20
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	08 95       	ret
  d8:	61 30       	cpi	r22, 0x01	; 1
  da:	69 f4       	brne	.+26     	; 0xf6 <Dio_WriteChannel+0x74>
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <Dio_WriteChannel+0x68>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	9a 95       	dec	r25
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <Dio_WriteChannel+0x64>
  ee:	cb 01       	movw	r24, r22
  f0:	84 2b       	or	r24, r20
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	08 95       	ret
  f6:	48 b3       	in	r20, 0x18	; 24
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	b9 01       	movw	r22, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <Dio_WriteChannel+0x82>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	9a 95       	dec	r25
 106:	e2 f7       	brpl	.-8      	; 0x100 <Dio_WriteChannel+0x7e>
 108:	cb 01       	movw	r24, r22
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret
 112:	61 30       	cpi	r22, 0x01	; 1
 114:	69 f4       	brne	.+26     	; 0x130 <Dio_WriteChannel+0xae>
 116:	45 b3       	in	r20, 0x15	; 21
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	b9 01       	movw	r22, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <Dio_WriteChannel+0xa2>
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	9a 95       	dec	r25
 126:	e2 f7       	brpl	.-8      	; 0x120 <Dio_WriteChannel+0x9e>
 128:	cb 01       	movw	r24, r22
 12a:	84 2b       	or	r24, r20
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	08 95       	ret
 130:	45 b3       	in	r20, 0x15	; 21
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	b9 01       	movw	r22, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <Dio_WriteChannel+0xbc>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	9a 95       	dec	r25
 140:	e2 f7       	brpl	.-8      	; 0x13a <Dio_WriteChannel+0xb8>
 142:	cb 01       	movw	r24, r22
 144:	80 95       	com	r24
 146:	84 23       	and	r24, r20
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret
 14c:	61 30       	cpi	r22, 0x01	; 1
 14e:	69 f4       	brne	.+26     	; 0x16a <Dio_WriteChannel+0xe8>
 150:	42 b3       	in	r20, 0x12	; 18
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <Dio_WriteChannel+0xdc>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	9a 95       	dec	r25
 160:	e2 f7       	brpl	.-8      	; 0x15a <Dio_WriteChannel+0xd8>
 162:	cb 01       	movw	r24, r22
 164:	84 2b       	or	r24, r20
 166:	82 bb       	out	0x12, r24	; 18
 168:	08 95       	ret
 16a:	42 b3       	in	r20, 0x12	; 18
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <Dio_WriteChannel+0xf6>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	9a 95       	dec	r25
 17a:	e2 f7       	brpl	.-8      	; 0x174 <Dio_WriteChannel+0xf2>
 17c:	cb 01       	movw	r24, r22
 17e:	80 95       	com	r24
 180:	84 23       	and	r24, r20
 182:	82 bb       	out	0x12, r24	; 18
 184:	08 95       	ret

00000186 <Dio_WritePort>:
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	41 f0       	breq	.+16     	; 0x19a <Dio_WritePort+0x14>
 18a:	28 f0       	brcs	.+10     	; 0x196 <Dio_WritePort+0x10>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	39 f0       	breq	.+14     	; 0x19e <Dio_WritePort+0x18>
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	39 f0       	breq	.+14     	; 0x1a2 <Dio_WritePort+0x1c>
 194:	08 95       	ret
 196:	6b bb       	out	0x1b, r22	; 27
 198:	08 95       	ret
 19a:	68 bb       	out	0x18, r22	; 24
 19c:	08 95       	ret
 19e:	65 bb       	out	0x15, r22	; 21
 1a0:	08 95       	ret
 1a2:	62 bb       	out	0x12, r22	; 18
 1a4:	08 95       	ret

000001a6 <Dio_ReadChannel>:



STD_levelType Dio_ReadChannel(Dio_ChannelType channelId){
	 Dio_PortType portx=channelId/8;
	 Dio_ChannelType channelPos=channelId%8;
 1a6:	28 2f       	mov	r18, r24
 1a8:	27 70       	andi	r18, 0x07	; 7
	switch(portx){
 1aa:	86 95       	lsr	r24
 1ac:	86 95       	lsr	r24
 1ae:	86 95       	lsr	r24
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	79 f0       	breq	.+30     	; 0x1d2 <Dio_ReadChannel+0x2c>
 1b4:	28 f0       	brcs	.+10     	; 0x1c0 <Dio_ReadChannel+0x1a>
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	a9 f0       	breq	.+42     	; 0x1e4 <Dio_ReadChannel+0x3e>
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	e1 f0       	breq	.+56     	; 0x1f6 <Dio_ReadChannel+0x50>
 1be:	24 c0       	rjmp	.+72     	; 0x208 <Dio_ReadChannel+0x62>
		case Dio_PortA:return GET_BIT(PINA_REG,channelPos);
 1c0:	89 b3       	in	r24, 0x19	; 25
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <Dio_ReadChannel+0x24>
 1c6:	95 95       	asr	r25
 1c8:	87 95       	ror	r24
 1ca:	2a 95       	dec	r18
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <Dio_ReadChannel+0x20>
 1ce:	81 70       	andi	r24, 0x01	; 1
 1d0:	08 95       	ret
		break;
		case Dio_PortB:return GET_BIT(PINB_REG,channelPos);
 1d2:	86 b3       	in	r24, 0x16	; 22
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <Dio_ReadChannel+0x36>
 1d8:	95 95       	asr	r25
 1da:	87 95       	ror	r24
 1dc:	2a 95       	dec	r18
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <Dio_ReadChannel+0x32>
 1e0:	81 70       	andi	r24, 0x01	; 1
 1e2:	08 95       	ret
		break;
		case Dio_PortC:return GET_BIT(PINC_REG,channelPos);
 1e4:	83 b3       	in	r24, 0x13	; 19
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <Dio_ReadChannel+0x48>
 1ea:	95 95       	asr	r25
 1ec:	87 95       	ror	r24
 1ee:	2a 95       	dec	r18
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <Dio_ReadChannel+0x44>
 1f2:	81 70       	andi	r24, 0x01	; 1
 1f4:	08 95       	ret
		break;
		case Dio_PortD:return GET_BIT(PIND_REG,channelPos);
 1f6:	80 b3       	in	r24, 0x10	; 16
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <Dio_ReadChannel+0x5a>
 1fc:	95 95       	asr	r25
 1fe:	87 95       	ror	r24
 200:	2a 95       	dec	r18
 202:	e2 f7       	brpl	.-8      	; 0x1fc <Dio_ReadChannel+0x56>
 204:	81 70       	andi	r24, 0x01	; 1
 206:	08 95       	ret
		break;	
	}
return 3;
 208:	83 e0       	ldi	r24, 0x03	; 3
}
 20a:	08 95       	ret

0000020c <Dio_init>:
	/*PD6*/		{Output,Low},
	/*PD7*/		{Output,Low},
};

void Dio_init(void)
{
 20c:	e0 e6       	ldi	r30, 0x60	; 96
 20e:	f0 e0       	ldi	r31, 0x00	; 0
	uint8 counter;
	uint8 currentPin ;
	uint8 currentPort;
	for(counter =Dio_Channel_A0; counter <PINCOUNT ; counter++)
 210:	80 e0       	ldi	r24, 0x00	; 0
			{
				case Dio_PortA:
				CLR_BIT(DDRA_REG,currentPin);
				break;
				case Dio_PortB:
				CLR_BIT(DDRB_REG,currentPin);
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	50 e0       	ldi	r21, 0x00	; 0
	uint8 counter;
	uint8 currentPin ;
	uint8 currentPort;
	for(counter =Dio_Channel_A0; counter <PINCOUNT ; counter++)
	{
		currentPin = counter % 8;
 216:	38 2f       	mov	r19, r24
 218:	37 70       	andi	r19, 0x07	; 7
		currentPort = counter /8;
 21a:	98 2f       	mov	r25, r24
 21c:	96 95       	lsr	r25
 21e:	96 95       	lsr	r25
 220:	96 95       	lsr	r25
		if(Dio_pin_config[counter].pinDirection ==Output)
 222:	20 81       	ld	r18, Z
 224:	21 30       	cpi	r18, 0x01	; 1
 226:	a1 f5       	brne	.+104    	; 0x290 <Dio_init+0x84>
		{
			switch (currentPort)
 228:	91 30       	cpi	r25, 0x01	; 1
 22a:	89 f0       	breq	.+34     	; 0x24e <Dio_init+0x42>
 22c:	28 f0       	brcs	.+10     	; 0x238 <Dio_init+0x2c>
 22e:	92 30       	cpi	r25, 0x02	; 2
 230:	c9 f0       	breq	.+50     	; 0x264 <Dio_init+0x58>
 232:	93 30       	cpi	r25, 0x03	; 3
 234:	11 f1       	breq	.+68     	; 0x27a <Dio_init+0x6e>
 236:	63 c0       	rjmp	.+198    	; 0x2fe <Dio_init+0xf2>
			{
				case Dio_PortA:
				SET_BIT(DDRA_REG,currentPin);
 238:	9a b3       	in	r25, 0x1a	; 26
 23a:	ba 01       	movw	r22, r20
 23c:	02 c0       	rjmp	.+4      	; 0x242 <Dio_init+0x36>
 23e:	66 0f       	add	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	3a 95       	dec	r19
 244:	e2 f7       	brpl	.-8      	; 0x23e <Dio_init+0x32>
 246:	9b 01       	movw	r18, r22
 248:	29 2b       	or	r18, r25
 24a:	2a bb       	out	0x1a, r18	; 26
				break;
 24c:	58 c0       	rjmp	.+176    	; 0x2fe <Dio_init+0xf2>
				case Dio_PortB:
				SET_BIT(DDRB_REG,currentPin);
 24e:	97 b3       	in	r25, 0x17	; 23
 250:	ba 01       	movw	r22, r20
 252:	02 c0       	rjmp	.+4      	; 0x258 <Dio_init+0x4c>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	3a 95       	dec	r19
 25a:	e2 f7       	brpl	.-8      	; 0x254 <Dio_init+0x48>
 25c:	9b 01       	movw	r18, r22
 25e:	29 2b       	or	r18, r25
 260:	27 bb       	out	0x17, r18	; 23
				break;
 262:	4d c0       	rjmp	.+154    	; 0x2fe <Dio_init+0xf2>
				case Dio_PortC:
				SET_BIT(DDRC_REG,currentPin);
 264:	94 b3       	in	r25, 0x14	; 20
 266:	ba 01       	movw	r22, r20
 268:	02 c0       	rjmp	.+4      	; 0x26e <Dio_init+0x62>
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	3a 95       	dec	r19
 270:	e2 f7       	brpl	.-8      	; 0x26a <Dio_init+0x5e>
 272:	9b 01       	movw	r18, r22
 274:	29 2b       	or	r18, r25
 276:	24 bb       	out	0x14, r18	; 20
				break;
 278:	42 c0       	rjmp	.+132    	; 0x2fe <Dio_init+0xf2>
				case Dio_PortD:
				SET_BIT(DDRD_REG,currentPin);
 27a:	91 b3       	in	r25, 0x11	; 17
 27c:	ba 01       	movw	r22, r20
 27e:	02 c0       	rjmp	.+4      	; 0x284 <Dio_init+0x78>
 280:	66 0f       	add	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	3a 95       	dec	r19
 286:	e2 f7       	brpl	.-8      	; 0x280 <Dio_init+0x74>
 288:	9b 01       	movw	r18, r22
 28a:	29 2b       	or	r18, r25
 28c:	21 bb       	out	0x11, r18	; 17
				break;
 28e:	37 c0       	rjmp	.+110    	; 0x2fe <Dio_init+0xf2>
			}//switch
		}//if
		else
		{
			switch (currentPort)
 290:	91 30       	cpi	r25, 0x01	; 1
 292:	91 f0       	breq	.+36     	; 0x2b8 <Dio_init+0xac>
 294:	28 f0       	brcs	.+10     	; 0x2a0 <Dio_init+0x94>
 296:	92 30       	cpi	r25, 0x02	; 2
 298:	d9 f0       	breq	.+54     	; 0x2d0 <Dio_init+0xc4>
 29a:	93 30       	cpi	r25, 0x03	; 3
 29c:	29 f1       	breq	.+74     	; 0x2e8 <Dio_init+0xdc>
 29e:	2f c0       	rjmp	.+94     	; 0x2fe <Dio_init+0xf2>
			{
				case Dio_PortA:
				CLR_BIT(DDRA_REG,currentPin);
 2a0:	2a b3       	in	r18, 0x1a	; 26
 2a2:	ba 01       	movw	r22, r20
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <Dio_init+0x9e>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	3a 95       	dec	r19
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <Dio_init+0x9a>
 2ae:	96 2f       	mov	r25, r22
 2b0:	90 95       	com	r25
 2b2:	92 23       	and	r25, r18
 2b4:	9a bb       	out	0x1a, r25	; 26
				break;
 2b6:	23 c0       	rjmp	.+70     	; 0x2fe <Dio_init+0xf2>
				case Dio_PortB:
				CLR_BIT(DDRB_REG,currentPin);
 2b8:	27 b3       	in	r18, 0x17	; 23
 2ba:	ba 01       	movw	r22, r20
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <Dio_init+0xb6>
 2be:	66 0f       	add	r22, r22
 2c0:	77 1f       	adc	r23, r23
 2c2:	3a 95       	dec	r19
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <Dio_init+0xb2>
 2c6:	96 2f       	mov	r25, r22
 2c8:	90 95       	com	r25
 2ca:	92 23       	and	r25, r18
 2cc:	97 bb       	out	0x17, r25	; 23
				break;
 2ce:	17 c0       	rjmp	.+46     	; 0x2fe <Dio_init+0xf2>
				case Dio_PortC:
				CLR_BIT(DDRC_REG,currentPin);
 2d0:	24 b3       	in	r18, 0x14	; 20
 2d2:	ba 01       	movw	r22, r20
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <Dio_init+0xce>
 2d6:	66 0f       	add	r22, r22
 2d8:	77 1f       	adc	r23, r23
 2da:	3a 95       	dec	r19
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <Dio_init+0xca>
 2de:	96 2f       	mov	r25, r22
 2e0:	90 95       	com	r25
 2e2:	92 23       	and	r25, r18
 2e4:	94 bb       	out	0x14, r25	; 20
				break;
 2e6:	0b c0       	rjmp	.+22     	; 0x2fe <Dio_init+0xf2>
				case Dio_PortD:
				CLR_BIT(DDRD_REG,currentPin);
 2e8:	21 b3       	in	r18, 0x11	; 17
 2ea:	ba 01       	movw	r22, r20
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <Dio_init+0xe6>
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	3a 95       	dec	r19
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <Dio_init+0xe2>
 2f6:	96 2f       	mov	r25, r22
 2f8:	90 95       	com	r25
 2fa:	92 23       	and	r25, r18
 2fc:	91 bb       	out	0x11, r25	; 17
void Dio_init(void)
{
	uint8 counter;
	uint8 currentPin ;
	uint8 currentPort;
	for(counter =Dio_Channel_A0; counter <PINCOUNT ; counter++)
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
 300:	32 96       	adiw	r30, 0x02	; 2
 302:	80 32       	cpi	r24, 0x20	; 32
 304:	09 f0       	breq	.+2      	; 0x308 <Dio_init+0xfc>
 306:	87 cf       	rjmp	.-242    	; 0x216 <Dio_init+0xa>
				break;
			}//switch
			
		}//else
	}//for
 308:	08 95       	ret

0000030a <main>:
#include "DIO_Types.h"
#include "DIO_CFG.h"
#include <util/delay.h>
int main(void)
{
Dio_init();
 30a:	0e 94 06 01 	call	0x20c	; 0x20c <Dio_init>
Dio_WriteChannel(Dio_Channel_A0,High);
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
    while (1)
    {
		if(Dio_ReadChannel(Dio_Channel_A0)==Low)
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Dio_ReadChannel>
 31c:	81 11       	cpse	r24, r1
 31e:	1f c0       	rjmp	.+62     	; 0x35e <main+0x54>
 320:	c0 e1       	ldi	r28, 0x10	; 16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 322:	87 ea       	ldi	r24, 0xA7	; 167
 324:	91 e6       	ldi	r25, 0x61	; 97
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <main+0x1c>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <main+0x22>
 32c:	00 00       	nop
		{
			     int i;
				 for(i=0;i<8;i++){
				   _delay_ms(100);
			        Dio_WriteChannel(Dio_Channel_C0+i,Low);
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	8c 2f       	mov	r24, r28
 332:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
 336:	8f e4       	ldi	r24, 0x4F	; 79
 338:	93 ec       	ldi	r25, 0xC3	; 195
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <main+0x30>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <main+0x36>
 340:	00 00       	nop
			        _delay_ms(200);
			        Dio_WriteChannel(Dio_Channel_C0+i,High);
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	8c 2f       	mov	r24, r28
 346:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WriteChannel>
 34a:	8f e4       	ldi	r24, 0x4F	; 79
 34c:	93 ec       	ldi	r25, 0xC3	; 195
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <main+0x44>
 352:	00 c0       	rjmp	.+0      	; 0x354 <main+0x4a>
 354:	00 00       	nop
 356:	cf 5f       	subi	r28, 0xFF	; 255
    while (1)
    {
		if(Dio_ReadChannel(Dio_Channel_A0)==Low)
		{
			     int i;
				 for(i=0;i<8;i++){
 358:	c8 31       	cpi	r28, 0x18	; 24
 35a:	19 f7       	brne	.-58     	; 0x322 <main+0x18>
 35c:	dc cf       	rjmp	.-72     	; 0x316 <main+0xc>
				   
				 }
		}
		
	else{
		Dio_WritePort(Dio_PortC,0XFF);
 35e:	6f ef       	ldi	r22, 0xFF	; 255
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	0e 94 c3 00 	call	0x186	; 0x186 <Dio_WritePort>
 366:	d7 cf       	rjmp	.-82     	; 0x316 <main+0xc>

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
