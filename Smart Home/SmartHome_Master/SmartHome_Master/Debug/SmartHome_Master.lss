
SmartHome_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001de  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009bb  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073c  00000000  00000000  00000d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000050b  00000000  00000000  0000144b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ad  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000327  00000000  00000000  00001e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002140  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  7a:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_13>:
#include "BITMATH.h"
#include "SPI.h"
#include "UARTMAS.h"
#include <avr/interrupt.h>
ISR(USART_RXC_vect)
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	2f 93       	push	r18
  8e:	3f 93       	push	r19
  90:	4f 93       	push	r20
  92:	5f 93       	push	r21
  94:	6f 93       	push	r22
  96:	7f 93       	push	r23
  98:	8f 93       	push	r24
  9a:	9f 93       	push	r25
  9c:	af 93       	push	r26
  9e:	bf 93       	push	r27
  a0:	ef 93       	push	r30
  a2:	ff 93       	push	r31
	
	//uartInit();
	char ReceivedByte ;
	ReceivedByte = UDR;  //data from bluetooth Module 
  a4:	8c b1       	in	r24, 0x0c	; 12
	switch(ReceivedByte)  
  a6:	82 34       	cpi	r24, 0x42	; 66
  a8:	c1 f0       	breq	.+48     	; 0xda <__vector_13+0x58>
  aa:	18 f4       	brcc	.+6      	; 0xb2 <__vector_13+0x30>
  ac:	81 34       	cpi	r24, 0x41	; 65
  ae:	31 f0       	breq	.+12     	; 0xbc <__vector_13+0x3a>
  b0:	40 c0       	rjmp	.+128    	; 0x132 <__vector_13+0xb0>
  b2:	83 34       	cpi	r24, 0x43	; 67
  b4:	09 f1       	breq	.+66     	; 0xf8 <__vector_13+0x76>
  b6:	84 34       	cpi	r24, 0x44	; 68
  b8:	71 f1       	breq	.+92     	; 0x116 <__vector_13+0x94>
  ba:	3b c0       	rjmp	.+118    	; 0x132 <__vector_13+0xb0>
	{
		
		case 'A':   // SET LED0 on
		SS_ENABLE();
  bc:	a8 98       	cbi	0x15, 0	; 21
		unsigned char recvByte=SPI_SEND(0x0A);
  be:	8a e0       	ldi	r24, 0x0A	; 10
  c0:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_SEND>
		SS_DISABLE();
  c4:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	83 ed       	ldi	r24, 0xD3	; 211
  ca:	90 e3       	ldi	r25, 0x30	; 48
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <__vector_13+0x4a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <__vector_13+0x54>
  d6:	00 00       	nop
  d8:	2c c0       	rjmp	.+88     	; 0x132 <__vector_13+0xb0>
		
		break;
		//_____________________________________
		
		case 'B':         //SET LED0 off
		SS_ENABLE();
  da:	a8 98       	cbi	0x15, 0	; 21
		         recvByte=SPI_SEND(0x0B);
  dc:	8b e0       	ldi	r24, 0x0B	; 11
  de:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_SEND>
		SS_DISABLE();
  e2:	a8 9a       	sbi	0x15, 0	; 21
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	83 ed       	ldi	r24, 0xD3	; 211
  e8:	90 e3       	ldi	r25, 0x30	; 48
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <__vector_13+0x68>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <__vector_13+0x72>
  f4:	00 00       	nop
  f6:	1d c0       	rjmp	.+58     	; 0x132 <__vector_13+0xb0>
		_delay_ms(1000);
		break;
		
		//____________________________________
		case 'C':             //SET LED1  on
		SS_ENABLE();
  f8:	a8 98       	cbi	0x15, 0	; 21
		 recvByte=SPI_SEND(0x0C);
  fa:	8c e0       	ldi	r24, 0x0C	; 12
  fc:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_SEND>
		SS_DISABLE();
 100:	a8 9a       	sbi	0x15, 0	; 21
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	83 ed       	ldi	r24, 0xD3	; 211
 106:	90 e3       	ldi	r25, 0x30	; 48
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <__vector_13+0x86>
 110:	00 c0       	rjmp	.+0      	; 0x112 <__vector_13+0x90>
 112:	00 00       	nop
 114:	0e c0       	rjmp	.+28     	; 0x132 <__vector_13+0xb0>
		break;
		
		//__________________________________________
		
		case 'D':           //SET LED1  off
		SS_ENABLE();
 116:	a8 98       	cbi	0x15, 0	; 21
	    recvByte=SPI_SEND(0x0D);
 118:	8d e0       	ldi	r24, 0x0D	; 13
 11a:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_SEND>
		SS_DISABLE();
 11e:	a8 9a       	sbi	0x15, 0	; 21
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	83 ed       	ldi	r24, 0xD3	; 211
 124:	90 e3       	ldi	r25, 0x30	; 48
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <__vector_13+0xa4>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <__vector_13+0xae>
 130:	00 00       	nop
		_delay_ms(1000);
		break;		  
	}
}
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	bf 91       	pop	r27
 138:	af 91       	pop	r26
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	7f 91       	pop	r23
 140:	6f 91       	pop	r22
 142:	5f 91       	pop	r21
 144:	4f 91       	pop	r20
 146:	3f 91       	pop	r19
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <main>:
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	83 ed       	ldi	r24, 0xD3	; 211
 158:	90 e3       	ldi	r25, 0x30	; 48
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0x6>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x10>
 164:	00 00       	nop

int main(void)
{
	
	_delay_ms(1000);
	UART_Init();
 166:	0e 94 cc 00 	call	0x198	; 0x198 <UART_Init>
	sei();
 16a:	78 94       	sei
    while (1) 
    {
		SPI_SEND(0x0A);
 16c:	8a e0       	ldi	r24, 0x0A	; 10
 16e:	0e 94 c7 00 	call	0x18e	; 0x18e <SPI_SEND>
		UART_SendString("SMART_HOME");
 172:	80 e6       	ldi	r24, 0x60	; 96
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 d7 00 	call	0x1ae	; 0x1ae <UART_SendString>
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	87 ea       	ldi	r24, 0xA7	; 167
 17e:	91 e6       	ldi	r25, 0x61	; 97
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x2c>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x36>
 18a:	00 00       	nop
 18c:	ef cf       	rjmp	.-34     	; 0x16c <main+0x18>

0000018e <SPI_SEND>:
	SET_BIT(SPCR,SPR0);
	
}
unsigned char SPI_SEND(unsigned char sendByte){
	
	SPDR=sendByte;
 18e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
 190:	77 9b       	sbis	0x0e, 7	; 14
 192:	fe cf       	rjmp	.-4      	; 0x190 <SPI_SEND+0x2>
	return SPDR;
 194:	8f b1       	in	r24, 0x0f	; 15
 196:	08 95       	ret

00000198 <UART_Init>:
}

char UART_Receive(){
	while( !(UCSRA & (1<<RXC)));
	return UDR;
}
 198:	87 e6       	ldi	r24, 0x67	; 103
 19a:	89 b9       	out	0x09, r24	; 9
 19c:	88 e1       	ldi	r24, 0x18	; 24
 19e:	8a b9       	out	0x0a, r24	; 10
 1a0:	86 e8       	ldi	r24, 0x86	; 134
 1a2:	80 bd       	out	0x20, r24	; 32
 1a4:	08 95       	ret

000001a6 <UART_Send>:
 1a6:	5d 9b       	sbis	0x0b, 5	; 11
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <UART_Send>
 1aa:	8c b9       	out	0x0c, r24	; 12
 1ac:	08 95       	ret

000001ae <UART_SendString>:
void UART_SendString(char *str){
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	fc 01       	movw	r30, r24
	char i=0;
	while(str[i]!='\0'){
 1b6:	80 81       	ld	r24, Z
 1b8:	88 23       	and	r24, r24
 1ba:	59 f0       	breq	.+22     	; 0x1d2 <UART_SendString+0x24>
 1bc:	8f 01       	movw	r16, r30
 1be:	c0 e0       	ldi	r28, 0x00	; 0
		UART_Send(str[i]);
 1c0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_Send>
		i++;
 1c4:	cf 5f       	subi	r28, 0xFF	; 255
	while( !(UCSRA & (1<<RXC)));
	return UDR;
}
void UART_SendString(char *str){
	char i=0;
	while(str[i]!='\0'){
 1c6:	f8 01       	movw	r30, r16
 1c8:	ec 0f       	add	r30, r28
 1ca:	f1 1d       	adc	r31, r1
 1cc:	80 81       	ld	r24, Z
 1ce:	81 11       	cpse	r24, r1
 1d0:	f7 cf       	rjmp	.-18     	; 0x1c0 <UART_SendString+0x12>
		UART_Send(str[i]);
		i++;
	}
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	08 95       	ret

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
